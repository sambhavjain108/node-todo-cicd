name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: docker build -t node-app .

  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info

  sonar_scan:
    name: Run SonarQube Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node dependencies (for scanner)
        run: npm ci

      - name: Set up Java (SonarQube requirement)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.projectKey=sonar \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  push_to_dockerhub:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: sonar_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_PASS }}

      - name: Build Docker Image
        run: docker build -t node-app .

      - name: Tag and Push Docker Image
        run: |
          docker tag node-app:latest ${{ secrets.DOCKERHUB_USER }}/node-app:latest
          docker push ${{ secrets.DOCKERHUB_USER }}/node-app:latest

  scan_with_trivy:
    name: Scan Docker Image with Trivy
    runs-on: ubuntu-latest
    needs: push_to_dockerhub
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Scan Docker Image and Save JSON Report
        run: |
          trivy image --format table --output trivy-report.json --severity HIGH,CRITICAL ${{ secrets.DOCKERHUB_USER }}/node-app:latest

      - name: Upload Trivy Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json

  deploy:
    name: Deploy App
    runs-on: [self-hosted, Linux, X64] # Make sure your EC2 runner uses these labels
    needs: scan_with_trivy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy with Docker Compose
        run: |
          docker-compose down
          docker-compose up -d

